package languagelab.lang.structure.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Aggregate;
  private ConceptPresentation props_Attribute;
  private ConceptPresentation props_EnumElement;
  private ConceptPresentation props_Enumeration;
  private ConceptPresentation props_ILLIdentifier;
  private ConceptPresentation props_ILLPostfixTrick;
  private ConceptPresentation props_Property;
  private ConceptPresentation props_Reference;
  private ConceptPresentation props_Type;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Aggregate:
        if (props_Aggregate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Aggregate = cpb.create();
        }
        return props_Aggregate;
      case LanguageConceptSwitch.Attribute:
        if (props_Attribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Attribute = cpb.create();
        }
        return props_Attribute;
      case LanguageConceptSwitch.EnumElement:
        if (props_EnumElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EnumElement = cpb.create();
        }
        return props_EnumElement;
      case LanguageConceptSwitch.Enumeration:
        if (props_Enumeration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Enumeration = cpb.create();
        }
        return props_Enumeration;
      case LanguageConceptSwitch.ILLIdentifier:
        if (props_ILLIdentifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ILLIdentifier = cpb.create();
        }
        return props_ILLIdentifier;
      case LanguageConceptSwitch.ILLPostfixTrick:
        if (props_ILLPostfixTrick == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ILLPostfixTrick = cpb.create();
        }
        return props_ILLPostfixTrick;
      case LanguageConceptSwitch.Property:
        if (props_Property == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Property = cpb.create();
        }
        return props_Property;
      case LanguageConceptSwitch.Reference:
        if (props_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Reference = cpb.create();
        }
        return props_Reference;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Type = cpb.create();
        }
        return props_Type;
    }
    return null;
  }
}
