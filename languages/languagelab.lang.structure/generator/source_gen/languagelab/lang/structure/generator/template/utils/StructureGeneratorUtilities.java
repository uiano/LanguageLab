package languagelab.lang.structure.generator.template.utils;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.adapter.ids.MetaIdByDeclaration;
import org.jetbrains.mps.openapi.model.SModel;

public class StructureGeneratorUtilities {
  public static boolean isBootstrapSituation(SNode node, TemplateQueryContext genContext) {
    SNode originalNode = genContext.getOriginalCopiedInputNode(node);
    SModule module = check_e50oph_a0b0a(check_e50oph_a0a1a0(originalNode));
    if (module == null) {
      return false;
    }

    SAbstractConcept concept = SNodeOperations.getConcept(node);
    SModule conceptModule = concept.getLanguage().getSourceModule();
    return module.equals(conceptModule);
  }

  public static String getIdFromConcept(SNode node, TemplateQueryContext genContext) {
    final Wrappers._T<String> conceptName = new Wrappers._T<String>("$dummy$");
    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept"))) {
      conceptName.value = SPropertyOperations.getString(SNodeOperations.cast(node, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
    } else {
      genContext.showErrorMessage(node, "Cannot generate concept without having a name");
      return "";
    }
    SNode original = ListSequence.fromList(SModelOperations.roots(genContext.getOriginalInputModel(), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept"))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), conceptName.value);
      }
    });
    if (original != null) {
      SConceptId conceptId = MetaIdByDeclaration.getConceptId(original);
      return String.valueOf(conceptId.getIdValue());
    } else {
      genContext.showErrorMessage(node, "Cannot find generated SConcept for this node");
      return "";
    }
  }
  private static SModule check_e50oph_a0b0a(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }
  private static SModel check_e50oph_a0a1a0(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModel();
    }
    return null;
  }
}
