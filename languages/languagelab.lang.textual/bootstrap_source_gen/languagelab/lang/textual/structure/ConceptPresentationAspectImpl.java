package languagelab.lang.textual.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Symbol;
  private ConceptPresentation props_TextAggregate;
  private ConceptPresentation props_TextAttribute;
  private ConceptPresentation props_TextConstant;
  private ConceptPresentation props_TextReference;
  private ConceptPresentation props_TextSyntax;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Symbol:
        if (props_Symbol == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Symbol");
          props_Symbol = cpb.create();
        }
        return props_Symbol;
      case LanguageConceptSwitch.TextAggregate:
        if (props_TextAggregate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TextAggregate");
          props_TextAggregate = cpb.create();
        }
        return props_TextAggregate;
      case LanguageConceptSwitch.TextAttribute:
        if (props_TextAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TextAttribute");
          props_TextAttribute = cpb.create();
        }
        return props_TextAttribute;
      case LanguageConceptSwitch.TextConstant:
        if (props_TextConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TextConstant");
          props_TextConstant = cpb.create();
        }
        return props_TextConstant;
      case LanguageConceptSwitch.TextReference:
        if (props_TextReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TextReference");
          props_TextReference = cpb.create();
        }
        return props_TextReference;
      case LanguageConceptSwitch.TextSyntax:
        if (props_TextSyntax == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TextSyntax = cpb.create();
        }
        return props_TextSyntax;
    }
    return null;
  }
}
