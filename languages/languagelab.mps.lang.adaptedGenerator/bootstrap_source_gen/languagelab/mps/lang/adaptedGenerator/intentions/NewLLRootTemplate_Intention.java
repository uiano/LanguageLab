package languagelab.mps.lang.adaptedGenerator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.nodeEditor.CreateFromUsageUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.util.Setter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.generator.intentions.MacroIntentionsUtil;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import org.jetbrains.mps.util.Condition;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public final class NewLLRootTemplate_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public NewLLRootTemplate_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:39fc6394-a6da-4c8a-a684-b3004357ba4c(languagelab.mps.lang.adaptedGenerator.intentions)", "8714292893667519872"));
  }
  @Override
  public String getPresentation() {
    return "NewLLRootTemplate";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "New LL Root Template";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      final Wrappers._T<String> name = new Wrappers._T<String>(CreateFromUsageUtil.getText(editorContext));
      if (name.value == null || name.value.length() == 0) {
        name.value = "llmap_" + SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.forType$mqiF), PROPS.name$tAp1);
      }
      final SNode rule = node;
      CreateFromUsageUtil.showCreateNewRootMenu(editorContext, new Setter<SNode>() {
        public void set(SNode root) {
          if (!(SNodeOperations.isInstanceOf(root, CONCEPTS.INamedConcept$nV))) {
            return;
          }
          SPropertyOperations.set(SNodeOperations.cast(root, CONCEPTS.INamedConcept$nV), PROPS.name$tAp1, name.value);
          MacroIntentionsUtil.copyVirtualPackage(root, node);
          SNodeFactoryOperations.setNewAttribute(root, new IAttributeDescriptor.NodeAttribute(CONCEPTS.RootTemplateAnnotation$u8), CONCEPTS.LLRootTemplateAnnotation$_J);
          SLinkOperations.setTarget(SNodeOperations.cast(AttributeOperations.getAttribute(root, new IAttributeDescriptor.NodeAttribute(CONCEPTS.RootTemplateAnnotation$u8)), CONCEPTS.LLRootTemplateAnnotation$_J), LINKS.forType$3Tow, SLinkOperations.getTarget(rule, LINKS.forType$mqiF));
          SLinkOperations.setTarget(rule, LINKS.template$FjUa, SNodeOperations.cast(root, CONCEPTS.INamedConcept$nV));
          SelectionUtil.selectCell(editorContext, rule, "templateName");
        }
      }, new Condition<SConcept>() {
        public boolean met(SConcept c) {
          if (SConceptOperations.isExactly(SNodeOperations.asSConcept(c), CONCEPTS.TemplateSwitch$BT)) {
            return false;
          }
          if (SConceptOperations.isExactly(SNodeOperations.asSConcept(c), CONCEPTS.MappingConfiguration$rB)) {
            return false;
          }
          if (SConceptOperations.isExactly(SNodeOperations.asSConcept(c), CONCEPTS.TemplateDeclaration$q0)) {
            return false;
          }
          if (SConceptOperations.isExactly(SNodeOperations.asSConcept(c), CONCEPTS.MappingScript$D9)) {
            return false;
          }
          return true;
        }
      });
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return NewLLRootTemplate_Intention.this;
    }
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink forType$mqiF = MetaAdapterFactory.getReferenceLink(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d56c529L, 0x3afac1bd2d56c52aL, "forType");
    /*package*/ static final SReferenceLink forType$3Tow = MetaAdapterFactory.getReferenceLink(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d5b529aL, 0x3afac1bd2d5b529bL, "forType");
    /*package*/ static final SReferenceLink template$FjUa = MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fd54746dbL, 0x10fd54746ddL, "template");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept INamedConcept$nV = MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept");
    /*package*/ static final SConcept RootTemplateAnnotation$u8 = MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11017244494L, "jetbrains.mps.lang.generator.structure.RootTemplateAnnotation");
    /*package*/ static final SConcept LLRootTemplateAnnotation$_J = MetaAdapterFactory.getConcept(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d5b529aL, "languagelab.mps.lang.adaptedGenerator.structure.LLRootTemplateAnnotation");
    /*package*/ static final SConcept TemplateSwitch$BT = MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313ed7688L, "jetbrains.mps.lang.generator.structure.TemplateSwitch");
    /*package*/ static final SConcept MappingConfiguration$rB = MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff0bea0475L, "jetbrains.mps.lang.generator.structure.MappingConfiguration");
    /*package*/ static final SConcept TemplateDeclaration$q0 = MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfe43cb41d0L, "jetbrains.mps.lang.generator.structure.TemplateDeclaration");
    /*package*/ static final SConcept MappingScript$D9 = MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1165958fcd6L, "jetbrains.mps.lang.generator.structure.MappingScript");
  }
}
