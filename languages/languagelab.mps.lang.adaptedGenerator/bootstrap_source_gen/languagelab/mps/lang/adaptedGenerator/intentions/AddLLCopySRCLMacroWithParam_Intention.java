package languagelab.mps.lang.adaptedGenerator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.generator.intentions.MacroIntentionsUtil;
import jetbrains.mps.lang.generator.helper.EditingUtil;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import languagelab.lang.structure.utils.SStuffHelper;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.ParameterizedIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class AddLLCopySRCLMacroWithParam_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  public AddLLCopySRCLMacroWithParam_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:39fc6394-a6da-4c8a-a684-b3004357ba4c(languagelab.mps.lang.adaptedGenerator.intentions)", "8598101631085785190"));
  }
  @Override
  public String getPresentation() {
    return "AddLLCopySRCLMacroWithParam";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    if (!(MacroIntentionsUtil.isInGeneratorModel(node))) {
      return false;
    }
    return EditingUtil.isNodeMacroApplicable(node);
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    List<IntentionExecutable> list = ListSequence.fromList(new ArrayList<IntentionExecutable>());
    List<SNode> paramList = parameter(node, context);
    if (paramList != null) {
      for (SNode param : paramList) {
        ListSequence.fromList(list).addElement(new IntentionImplementation(param));
      }
    }
    return list;
  }
  private List<SNode> parameter(final SNode node, final EditorContext editorContext) {
    SNode currentNode = node;
    while (currentNode != null) {
      if (AttributeOperations.getAttribute(currentNode, new IAttributeDescriptor.NodeAttribute(CONCEPTS.RootTemplateAnnotation$u8)) != null) {
        if (SNodeOperations.isInstanceOf(AttributeOperations.getAttribute(currentNode, new IAttributeDescriptor.NodeAttribute(CONCEPTS.RootTemplateAnnotation$u8)), CONCEPTS.LLRootTemplateAnnotation$_J)) {
          return (List<SNode>) (SLinkOperations.getTarget(SNodeOperations.cast(AttributeOperations.getAttribute(currentNode, new IAttributeDescriptor.NodeAttribute(CONCEPTS.RootTemplateAnnotation$u8)), CONCEPTS.LLRootTemplateAnnotation$_J), LINKS.forType$3Tow).getChildren(SStuffHelper.TYPE_AGGREGATES));
        }
      }
      if (SNodeOperations.isInstanceOf(currentNode, CONCEPTS.LLTemplateDeclaration$EC)) {
        return (List<SNode>) (SLinkOperations.getTarget(SNodeOperations.cast(currentNode, CONCEPTS.LLTemplateDeclaration$EC), LINKS.forType$v0G0).getChildren(SStuffHelper.TYPE_AGGREGATES));
      }
      currentNode = SNodeOperations.getParent(currentNode);
    }
    return null;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable implements ParameterizedIntentionExecutable {
    private SNode myParameter;
    public IntentionImplementation(SNode parameter) {
      myParameter = parameter;
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Apply LL COPY__SRCL over node." + SPropertyOperations.getString(myParameter, PROPS.name$tAp1);
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode nodeMacro = EditingUtil.addNodeMacro(node);
      SNode llcopySrcListMacro = SNodeFactoryOperations.createNewNode(CONCEPTS.LLCopySourceListMacro$EN, null);
      SNodeOperations.replaceWithAnother(nodeMacro, llcopySrcListMacro);
      SLinkOperations.setTarget(llcopySrcListMacro, LINKS.myAggregate$a61a, myParameter);
      // set caret 
      SelectionUtil.selectLabelCellAnSetCaret(editorContext, llcopySrcListMacro, SelectionManager.FIRST_CELL, 1);
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return AddLLCopySRCLMacroWithParam_Intention.this;
    }
    public Object getParameter() {
      return myParameter;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RootTemplateAnnotation$u8 = MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11017244494L, "jetbrains.mps.lang.generator.structure.RootTemplateAnnotation");
    /*package*/ static final SConcept LLRootTemplateAnnotation$_J = MetaAdapterFactory.getConcept(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d5b529aL, "languagelab.mps.lang.adaptedGenerator.structure.LLRootTemplateAnnotation");
    /*package*/ static final SConcept LLTemplateDeclaration$EC = MetaAdapterFactory.getConcept(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d58fca2L, "languagelab.mps.lang.adaptedGenerator.structure.LLTemplateDeclaration");
    /*package*/ static final SConcept LLCopySourceListMacro$EN = MetaAdapterFactory.getConcept(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d504518L, "languagelab.mps.lang.adaptedGenerator.structure.LLCopySourceListMacro");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink forType$3Tow = MetaAdapterFactory.getReferenceLink(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d5b529aL, 0x3afac1bd2d5b529bL, "forType");
    /*package*/ static final SReferenceLink forType$v0G0 = MetaAdapterFactory.getReferenceLink(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d58fca2L, 0x3afac1bd2d58fca3L, "forType");
    /*package*/ static final SReferenceLink myAggregate$a61a = MetaAdapterFactory.getReferenceLink(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d504518L, 0x3afac1bd2d50451aL, "myAggregate");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
