package languagelab.mps.lang.adaptedGenerator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.nodeEditor.CreateFromUsageUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.generator.intentions.MacroIntentionsUtil;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class NewLLTemplateInReductionRule_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public NewLLTemplateInReductionRule_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:39fc6394-a6da-4c8a-a684-b3004357ba4c(languagelab.mps.lang.adaptedGenerator.intentions)", "6786033625862132665"));
  }
  @Override
  public String getPresentation() {
    return "NewLLTemplateInReductionRule";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(SNodeOperations.getParent(node))), CONCEPTS.TemplateSwitch$BT)) {
      return false;
    }
    final EditorCell editorCell = editorContext.getSelectedCell();
    if (editorCell == null) {
      return false;
    }
    return SLinkOperations.getTarget(node, LINKS.ruleConsequence$y7a4) == null || SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(SLinkOperations.getTarget(node, LINKS.ruleConsequence$y7a4))), CONCEPTS.RuleConsequence$N0);
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "New LL Template";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode applicableType = SLinkOperations.getTarget(node, LINKS.forType$lJP0);
      String name = CreateFromUsageUtil.getText(editorContext);
      if (name == null || name.length() == 0) {
        name = "reduce_";
        if (applicableType != null) {
          name += SPropertyOperations.getString(applicableType, PROPS.name$tAp1);
        }
      }
      SNode t = SNodeFactoryOperations.createNewRootNode(SNodeOperations.getModel(node), CONCEPTS.LLTemplateDeclaration$EC, null);
      SPropertyOperations.set(t, PROPS.name$tAp1, name);
      SLinkOperations.setTarget(t, LINKS.forType$v0G0, applicableType);
      MacroIntentionsUtil.copyVirtualPackage(t, node);
      // make reference 
      SNode tr = SNodeFactoryOperations.setNewChild(node, LINKS.ruleConsequence$y7a4, CONCEPTS.TemplateDeclarationReference$bd);
      SLinkOperations.setTarget(tr, LINKS.template$yiTA, t);
      SelectionUtil.selectCell(editorContext, tr, SelectionManager.FIRST_EDITABLE_CELL);
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return NewLLTemplateInReductionRule_Intention.this;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TemplateSwitch$BT = MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313ed7688L, "jetbrains.mps.lang.generator.structure.TemplateSwitch");
    /*package*/ static final SConcept RuleConsequence$N0 = MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x110138ccc4bL, "jetbrains.mps.lang.generator.structure.RuleConsequence");
    /*package*/ static final SConcept LLTemplateDeclaration$EC = MetaAdapterFactory.getConcept(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d58fca2L, "languagelab.mps.lang.adaptedGenerator.structure.LLTemplateDeclaration");
    /*package*/ static final SConcept TemplateDeclarationReference$bd = MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11013906056L, "jetbrains.mps.lang.generator.structure.TemplateDeclarationReference");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink ruleConsequence$y7a4 = MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fca296532L, 0x11055ee07edL, "ruleConsequence");
    /*package*/ static final SReferenceLink forType$lJP0 = MetaAdapterFactory.getReferenceLink(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d54831eL, 0x3afac1bd2d54831fL, "forType");
    /*package*/ static final SReferenceLink forType$v0G0 = MetaAdapterFactory.getReferenceLink(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d58fca2L, 0x3afac1bd2d58fca3L, "forType");
    /*package*/ static final SReferenceLink template$yiTA = MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0x17e941d108ce3120L, 0x17e941d108ce3173L, "template");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
