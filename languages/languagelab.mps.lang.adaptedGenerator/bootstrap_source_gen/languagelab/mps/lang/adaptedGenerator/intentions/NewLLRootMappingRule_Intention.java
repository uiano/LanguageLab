package languagelab.mps.lang.adaptedGenerator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class NewLLRootMappingRule_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public NewLLRootMappingRule_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:39fc6394-a6da-4c8a-a684-b3004357ba4c(languagelab.mps.lang.adaptedGenerator.intentions)", "4249922216632041106"));
  }
  @Override
  public String getPresentation() {
    return "NewLLRootMappingRule";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "New LL Root Mapping Rule";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SLinkOperations.addNewChild(SNodeOperations.cast(SNodeOperations.getParent(node), CONCEPTS.MappingConfiguration$rB), LINKS.rootMappingRule$gaRA, CONCEPTS.LLRoot_MappingRule$kf);
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return NewLLRootMappingRule_Intention.this;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept MappingConfiguration$rB = MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff0bea0475L, "jetbrains.mps.lang.generator.structure.MappingConfiguration");
    /*package*/ static final SConcept LLRoot_MappingRule$kf = MetaAdapterFactory.getConcept(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d56c529L, "languagelab.mps.lang.adaptedGenerator.structure.LLRoot_MappingRule");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink rootMappingRule$gaRA = MetaAdapterFactory.getContainmentLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff0bea0475L, 0x10fd54c33e7L, "rootMappingRule");
  }
}
