package languagelab.mps.lang.adaptedGenerator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionAspectDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class IntentionsDescriptor extends AbstractIntentionAspectDescriptor {
  private static final IntentionFactory[] EMPTY_ARRAY = new IntentionFactory[0];
  private Map<SAbstractConcept, IntentionFactory[]> myCached = new HashMap<SAbstractConcept, IntentionFactory[]>();

  public IntentionsDescriptor() {
  }

  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SAbstractConcept concept) {
    if (myCached.containsKey(concept)) {
      return Arrays.asList(myCached.get(concept));
    }

    IntentionFactory[] intentions = EMPTY_ARRAY;
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        if (true) {
          // concept 
          intentions = new IntentionFactory[9];
          intentions[0] = new AddLLCopySRCLMacroWithParam_Intention();
          intentions[1] = new AddLLChangeIfMacro_Intention();
          intentions[2] = new AddLLIfMacroWithParam_Intention();
          intentions[3] = new AddLLLoopMacroWithParam_Intention();
          intentions[4] = new AddLLParentReferenceMacro_Intention();
          intentions[5] = new AddLLPropertyMacro_Intention();
          intentions[6] = new AddLLReferenceMacro_Intention();
          intentions[7] = new AddLLSelfReferenceMacro_Intention();
          intentions[8] = new AddLLSpecialReferenceMacro_Intention();
        }
        break;
      case 1:
        if (true) {
          // concept 
          intentions = new IntentionFactory[1];
          intentions[0] = new NewLLTemplateInReductionRule_Intention();
        }
        break;
      case 2:
        if (true) {
          // concept 
          intentions = new IntentionFactory[1];
          intentions[0] = new NewLLRootTemplate_Intention();
        }
        break;
      case 3:
        if (true) {
          // concept 
          intentions = new IntentionFactory[1];
          intentions[0] = new NewLLReductionMappingRule_Intention();
        }
        break;
      case 4:
        if (true) {
          // concept 
          intentions = new IntentionFactory[1];
          intentions[0] = new NewLLRootMappingRule_Intention();
        }
        break;
      default:
    }
    myCached.put(concept, intentions);
    return Arrays.asList(intentions);
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[13];
    rv[0] = new AddLLCopySRCLMacroWithParam_Intention();
    rv[1] = new NewLLRootMappingRule_Intention();
    rv[2] = new NewLLTemplateInReductionRule_Intention();
    rv[3] = new AddLLChangeIfMacro_Intention();
    rv[4] = new AddLLIfMacroWithParam_Intention();
    rv[5] = new AddLLLoopMacroWithParam_Intention();
    rv[6] = new AddLLParentReferenceMacro_Intention();
    rv[7] = new AddLLPropertyMacro_Intention();
    rv[8] = new AddLLReferenceMacro_Intention();
    rv[9] = new AddLLSelfReferenceMacro_Intention();
    rv[10] = new AddLLSpecialReferenceMacro_Intention();
    rv[11] = new NewLLRootTemplate_Intention();
    rv[12] = new NewLLReductionMappingRule_Intention();
    return Arrays.asList(rv);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d54831eL), MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d56c529L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fca296532L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fd54746dbL)).seal();
}
