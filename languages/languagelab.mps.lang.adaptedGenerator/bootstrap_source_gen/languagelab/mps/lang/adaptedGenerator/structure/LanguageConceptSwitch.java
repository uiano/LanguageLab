package languagelab.mps.lang.adaptedGenerator.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int LLChangeIfMacro = 0;
  public static final int LLCopySourceListMacro = 1;
  public static final int LLIfMacro = 2;
  public static final int LLLoopMacro = 3;
  public static final int LLParentReferenceMacro = 4;
  public static final int LLPropertyMacro = 5;
  public static final int LLPropertyMacro_GetPropertyValue_Behaviour = 6;
  public static final int LLReduction_MappingRule = 7;
  public static final int LLRootTemplateAnnotation = 8;
  public static final int LLRoot_MappingRule = 9;
  public static final int LLSelfReferenceMacro = 10;
  public static final int LLSimpleReferenceMacro = 11;
  public static final int LLSpecialReferenceMacro = 12;
  public static final int LLTemplateDeclaration = 13;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L);
    builder.put(0x3afac1bd2d4b60b0L, LLChangeIfMacro);
    builder.put(0x3afac1bd2d504518L, LLCopySourceListMacro);
    builder.put(0x3afac1bd2d525942L, LLIfMacro);
    builder.put(0x3afac1bd2d590475L, LLLoopMacro);
    builder.put(0x3afac1bd2d5904aaL, LLParentReferenceMacro);
    builder.put(0x3afac1bd2d5b525eL, LLPropertyMacro);
    builder.put(0x3afac1bd2d5904c5L, LLPropertyMacro_GetPropertyValue_Behaviour);
    builder.put(0x3afac1bd2d54831eL, LLReduction_MappingRule);
    builder.put(0x3afac1bd2d5b529aL, LLRootTemplateAnnotation);
    builder.put(0x3afac1bd2d56c529L, LLRoot_MappingRule);
    builder.put(0x3afac1bd2d5b52f5L, LLSelfReferenceMacro);
    builder.put(0x3afac1bd2d5b5310L, LLSimpleReferenceMacro);
    builder.put(0x3afac1bd2d5b534cL, LLSpecialReferenceMacro);
    builder.put(0x3afac1bd2d58fca2L, LLTemplateDeclaration);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
