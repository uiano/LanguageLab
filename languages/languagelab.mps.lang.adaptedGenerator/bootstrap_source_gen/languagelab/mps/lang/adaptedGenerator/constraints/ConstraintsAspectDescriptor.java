package languagelab.mps.lang.adaptedGenerator.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new LLChangeIfMacro_Constraints();
      case 1:
        return new LLCopySourceListMacro_Constraints();
      case 2:
        return new LLIfMacro_Constraints();
      case 3:
        return new LLLoopMacro_Constraints();
      case 4:
        return new LLPropertyMacro_Constraints();
      case 5:
        return new LLReduction_MappingRule_Constraints();
      case 6:
        return new LLRootTemplateAnnotation_Constraints();
      case 7:
        return new LLRoot_MappingRule_Constraints();
      case 8:
        return new LLSimpleReferenceMacro_Constraints();
      case 9:
        return new LLSpecialReferenceMacro_Constraints();
      case 10:
        return new LLTemplateDeclaration_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d4b60b0L), MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d504518L), MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d525942L), MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d590475L), MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d5b525eL), MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d54831eL), MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d5b529aL), MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d56c529L), MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d5b5310L), MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d5b534cL), MetaIdFactory.conceptId(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d58fca2L)).seal();
}
