package languagelab.mps.lang.adaptedGenerator.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import languagelab.lang.structure.utils.SStuffHelper;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class LLLoopMacro_Constraints extends BaseConstraintsDescriptor {
  public LLLoopMacro_Constraints() {
    super(CONCEPTS.LLLoopMacro$C7);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.loopElements$Aicw, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_ngdt7j_a0a0a0a0a1a0a0a0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            SNode myRoot = SNodeOperations.getContainingRoot(_context.getContextNode());
            SNode rootType;
            if (SNodeOperations.isInstanceOf(myRoot, CONCEPTS.LLTemplateDeclaration$EC)) {
              rootType = SLinkOperations.getTarget(SNodeOperations.cast(myRoot, CONCEPTS.LLTemplateDeclaration$EC), LINKS.forType$v0G0);
            } else {
              rootType = SLinkOperations.getTarget(SNodeOperations.cast(AttributeOperations.getAttribute(myRoot, new IAttributeDescriptor.NodeAttribute(CONCEPTS.RootTemplateAnnotation$u8)), CONCEPTS.LLRootTemplateAnnotation$_J), LINKS.forType$3Tow);
            }
            List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
            SNode myType = rootType;
            while (myType != null) {
              ListSequence.fromList(result).addSequence(Sequence.fromIterable(myType.getChildren(SStuffHelper.TYPE_AGGREGATES)));
              SReference myParent = myType.getReference(SStuffHelper.TYPE_PARENTTYPE);
              if (myParent != null) {
                myType = myParent.getTargetNode();
              } else {
                myType = null;
              }
            }
            ListScope ls = new ListScope(result) {
              public String getName(SNode child) {
                return SPropertyOperations.getString(SNodeOperations.cast(child, CONCEPTS.INamedConcept$nV), PROPS.name$tAp1);
              }
            };
            return ls;
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private static final SNodePointer breakingNode_ngdt7j_a0a0a0a0a1a0a0a0c = new SNodePointer("r:aa88a3b8-c90e-4870-9ff0-fbabf67ef8ef(languagelab.mps.lang.adaptedGenerator.constraints)", "8714292893663096560");

  private static final class CONCEPTS {
    /*package*/ static final SConcept LLLoopMacro$C7 = MetaAdapterFactory.getConcept(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d590475L, "languagelab.mps.lang.adaptedGenerator.structure.LLLoopMacro");
    /*package*/ static final SConcept LLTemplateDeclaration$EC = MetaAdapterFactory.getConcept(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d58fca2L, "languagelab.mps.lang.adaptedGenerator.structure.LLTemplateDeclaration");
    /*package*/ static final SConcept RootTemplateAnnotation$u8 = MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11017244494L, "jetbrains.mps.lang.generator.structure.RootTemplateAnnotation");
    /*package*/ static final SConcept LLRootTemplateAnnotation$_J = MetaAdapterFactory.getConcept(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d5b529aL, "languagelab.mps.lang.adaptedGenerator.structure.LLRootTemplateAnnotation");
    /*package*/ static final SInterfaceConcept INamedConcept$nV = MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink loopElements$Aicw = MetaAdapterFactory.getReferenceLink(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d590475L, 0x3afac1bd2d590476L, "loopElements");
    /*package*/ static final SReferenceLink forType$v0G0 = MetaAdapterFactory.getReferenceLink(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d58fca2L, 0x3afac1bd2d58fca3L, "forType");
    /*package*/ static final SReferenceLink forType$3Tow = MetaAdapterFactory.getReferenceLink(0xe0a091b2dc994294L, 0xa6268d2e85598ee6L, 0x3afac1bd2d5b529aL, 0x3afac1bd2d5b529bL, "forType");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
