package languagelab.lang.smodel.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.FilteringScope;
import jetbrains.mps.lang.structure.constraints.Scopes;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;

public class ReferenceRef_Constraints extends BaseConstraintsDescriptor {
  public ReferenceRef_Constraints() {
    super(MetaAdapterFactory.getConcept(0x1111b0d61b274daaL, 0x92f98b9e03529a60L, 0x4f31c8d37d2477ebL, "languagelab.lang.smodel.structure.ReferenceRef"));
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(MetaAdapterFactory.getReferenceLink(0x1111b0d61b274daaL, 0x92f98b9e03529a60L, 0x4f31c8d37d2477ebL, 0x4f31c8d37d2477ecL, "typeDecl"), new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x1111b0d61b274daaL, 0x92f98b9e03529a60L, 0x4f31c8d37d2477ebL, 0x4f31c8d37d2477ecL), this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_alwr8f_a0a0a0a0a1a0b0a1a2;
          }
          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return new FilteringScope(Scopes.forConcepts(_context.getContextNode(), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept"))) {
              @Override
              public boolean isExcluded(SNode node) {
                return !(SNodeOperations.getConcept(node).getName().equals("Type"));
              }
            };
          }
        };
      }
    });
    references.put(MetaAdapterFactory.getReferenceLink(0x1111b0d61b274daaL, 0x92f98b9e03529a60L, 0x4f31c8d37d2477ebL, 0x4f31c8d37d2477edL, "refeDecl"), new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x1111b0d61b274daaL, 0x92f98b9e03529a60L, 0x4f31c8d37d2477ebL, 0x4f31c8d37d2477edL), this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_alwr8f_a0a0a0a0a1a0b0a2a2;
          }
          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
            ListSequence.fromList(result).addSequence(Sequence.fromIterable(SLinkOperations.getTarget(_context.getReferenceNode(), MetaAdapterFactory.getReferenceLink(0x1111b0d61b274daaL, 0x92f98b9e03529a60L, 0x4f31c8d37d2477ebL, 0x4f31c8d37d2477ecL, "typeDecl")).getChildren()));
            return new FilteringScope(new ListScope(result) {
              public String getName(SNode child) {
                return SPropertyOperations.getString(SNodeOperations.cast(child, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
              }
            }) {
              @Override
              public boolean isExcluded(SNode node) {
                return !(SNodeOperations.getConcept(node).getName().equals("Reference"));
              }
            };
          }
        };
      }
    });
    return references;
  }
  private static SNodePointer breakingNode_alwr8f_a0a0a0a0a1a0b0a1a2 = new SNodePointer("r:b3fff937-055e-4c49-9f98-c6f9a53c2328(languagelab.lang.smodel.constraints)", "5706563013529416392");
  private static SNodePointer breakingNode_alwr8f_a0a0a0a0a1a0b0a2a2 = new SNodePointer("r:b3fff937-055e-4c49-9f98-c6f9a53c2328(languagelab.lang.smodel.constraints)", "5706563013529703775");
}
