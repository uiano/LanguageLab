package languagelab.lang.smodel.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ChildRef;
  private ConceptPresentation props_PropertyRef;
  private ConceptPresentation props_ReferenceRef;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ChildRef:
        if (props_ChildRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("child//");
          props_ChildRef = cpb.create();
        }
        return props_ChildRef;
      case LanguageConceptSwitch.PropertyRef:
        if (props_PropertyRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("property//");
          props_PropertyRef = cpb.create();
        }
        return props_PropertyRef;
      case LanguageConceptSwitch.ReferenceRef:
        if (props_ReferenceRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("reference//");
          props_ReferenceRef = cpb.create();
        }
        return props_ReferenceRef;
    }
    return null;
  }
}
